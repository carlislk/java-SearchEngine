

import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import org.json.simple.parser.ParseException;
import org.json.simple.parser.JSONParser;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;


import java.util.Iterator;



/**
 * Servlet implementation class searchEngine
 */
@WebServlet("/searchEngine")
public class searchEngine extends HttpServlet 
{
	public static final int FILE_COUNT = 44536;
	
	public static HashMap<String, Integer> term_termID = new HashMap<String, Integer>();
    public static HashMap<Integer, HashMap<Integer, Float>> termid_tfidf = new HashMap<Integer, HashMap<Integer,Float>>();
	public static HashSet<String> stop_words = new HashSet<String>();
    public static JSONObject docid_url;

	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public searchEngine() 
    {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see Servlet#init(ServletConfig)
	 */
	public void init(ServletConfig config) throws ServletException 
	{
		// TODO Auto-generated method stub
		System.out.println("INIT");
		
		// Initialize Map
		initializeMaps();
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	{
		// TODO Auto-generated method stub
		System.out.println("GET");
		
		// Get Parameters from Session
        String userQuery = request.getParameter("userQuery").trim();
        
        System.out.println("User Request: " +  userQuery);
		
		
		
		// Return To Index Page With Results Set
        request.getRequestDispatcher("/index.jsp").forward(request, response);

	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	{
		// TODO Auto-generated method stub
		System.out.println("Post");
	}
	
	public static void intializeMaps()
	{
		long startTime = System.currentTimeMillis();
		
		try 
		{
			// Create the hash map for term to termID
			for (String line : Files.readAllLines(Paths.get("/web_search_1/WebContent/term_termID.txt"))) 
			{
				int posSplit = line.indexOf(':');
				String term = line.substring(0, posSplit);
				int termID = Integer.parseInt(line.substring(posSplit+1));
				term_termID.put(term, termID);
			}
			
			// Createthe hash map for termID to docID/TFIDF
			for (String line : Files.readAllLines(Paths.get("/web_search_1/WebContent/term_docid-tfidf.txt"))) 
			{
				int termSplit = line.indexOf(':');
				
				int termID = Integer.parseInt(line.substring(1, termSplit));				
				termid_tfidf.put(termID, new HashMap<Integer, Float>());
				
				String docIDList = line.substring(termSplit + 2, line.length()-2);
				for( String pair : docIDList.split(","))
				{
					int equalSplitPos = pair.indexOf('=');
					
					int docID = Integer.parseInt(pair.substring(1, equalSplitPos));
					float tfidfVal = Float.parseFloat(pair.substring(equalSplitPos+1));
					
					//System.out.println("Adding " + termID + " --> " + docID + " : " + tfidfVal);
					
					termid_tfidf.get(termID).put(docID, tfidfVal);
				}
			}
			
			for (String word : Files.readAllLines(Paths.get("/web_search_1/WebContent/stop_words.txt")))
				stop_words.add(word);
			
			// Create JSONObject containing docID to url
			JSONParser parser = new JSONParser();
			Object obj = parser.parse(new FileReader("/web_search_1/WebContent/html_files.json"));
			docid_url = (JSONObject) obj;
						
			long stopTime = System.currentTimeMillis();
		    long elapsedTime = stopTime - startTime;
		    System.out.println(elapsedTime / 1000.0 + " second runtime to build database");
		    System.out.println();
		    
		} catch (IOException | ParseException e) {
			e.printStackTrace();
		}
		
	}
	


}
